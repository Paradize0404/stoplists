import os
import asyncio
import asyncpg
import httpx
from dotenv import load_dotenv

import requests
load_dotenv()

DB_CONFIG = {
    "user": os.getenv("PGUSER"),
    "password": os.getenv("PGPASSWORD"),
    "database": os.getenv("PGDATABASE"),
    "host": os.getenv("PGHOST"),
    "port": os.getenv("PGPORT"),
}

BOT_TOKEN = os.getenv("BOT_TOKEN")
#CHAT_ID = 1877127405

IIKO_ORG_ID = os.getenv("ORG_ID")

async def get_all_chat_ids():
    try:
        conn = await asyncpg.connect(**DB_CONFIG)
        rows = await conn.fetch("SELECT chat_id FROM users WHERE chat_id IS NOT NULL;")
        await conn.close()
        return [row["chat_id"] for row in rows]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []


async def fetch_token():
    try:
        conn = await asyncpg.connect(**DB_CONFIG)
        row = await conn.fetchrow("SELECT token FROM iiko_access_tokens ORDER BY created_at DESC LIMIT 1")
        await conn.close()
        return row["token"] if row else None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def fetch_terminal_groups(token):
    url = "https://api-ru.iiko.services/api/1/terminal_groups"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json",
    }
    json_data = {
        "organizationIds": [IIKO_ORG_ID]
    }

    response = requests.post(url, headers=headers, json=json_data)
    response.raise_for_status()

    data = response.json()

    try:
        items = data["terminalGroups"][0]["items"]
        for item in items:
            print(f"üìü –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞: {item['name']} | ID: {item['id']}")
        return [item["id"] for item in items]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø: {e}")
        return []



def fetch_stop_list_raw(token, terminal_group_ids):
    url = "https://api-ru.iiko.services/api/1/stop_lists"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json",
    }
    json_data = {
        "organizationIds": [IIKO_ORG_ID],
        "terminalGroupIds": terminal_group_ids  # ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: terminalGroupIds, –Ω–µ terminalGroupsIds
    }

    response = requests.post(url, headers=headers, json=json_data)
    print(f"\nüì° –û—Ç–≤–µ—Ç –æ—Ç stopLists:\n{response.status_code}\n{response.text}")

    if response.status_code == 200:
        try:
            data = response.json()
            # –î–æ—Å—Ç–∞—ë–º —Å—Ç–æ–ø-–ª–∏—Å—Ç –≤—Å–µ—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø
            items = data["terminalGroupStopLists"][0]["items"][0]["items"]
            return items
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞: {e}")
            return []
    else:
        print("‚ùå –ó–∞–ø—Ä–æ—Å —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è.")
        return []

async def map_stoplist_with_db(db_config, stoplist_items):
    conn = await asyncpg.connect(**db_config)

    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö sku –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞
    skus = [item["sku"] for item in stoplist_items]
    query = "SELECT code, name FROM nomenclature WHERE code = ANY($1)"
    rows = await conn.fetch(query, skus)

    await conn.close()

    # –°–ª–æ–≤–∞—Ä—å: sku ‚Üí name
    sku_name_map = {row["code"]: row["name"] for row in rows}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = []
    for item in stoplist_items:
        name = sku_name_map.get(item["sku"], "[–ù–ï –ù–ê–ô–î–ï–ù–û –í –ë–î]")
        item["name"] = name  # ‚Üê –í–æ—Ç —ç—Ç–æ –≤–∞–∂–Ω–æ!
        result.append(f"{name} | SKU: {item['sku']} | –û—Å—Ç–∞—Ç–æ–∫: {item['balance']}")
    
    return result



async def sync_stoplist_with_db(stoplist_items):
    conn = await asyncpg.connect(**DB_CONFIG)

    await conn.execute("""
        CREATE TABLE IF NOT EXISTS active_stoplist (
            sku TEXT PRIMARY KEY,
            balance REAL,
            name TEXT
        );
    """)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö SKU –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    current_rows = await conn.fetch("SELECT sku, name FROM active_stoplist;")
    current_skus = {row["sku"]: row["name"] for row in current_rows}

    # SKU –∏–∑ API
    incoming_skus = {item["sku"]: item["name"] for item in stoplist_items}

    # –ù–æ–≤—ã–µ
    new_items = [(sku, name) for sku, name in incoming_skus.items() if sku not in current_skus]
    # –£–∂–µ –±—ã–ª–∏
    existing_items = [(sku, name) for sku, name in incoming_skus.items() if sku in current_skus]
    # –£–¥–∞–ª—è–µ–º—ã–µ
    to_delete = [sku for sku in current_skus if sku not in incoming_skus]

    # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö
    for sku, name in new_items:
        item = next(i for i in stoplist_items if i["sku"] == sku)
        await conn.execute("""
            INSERT INTO active_stoplist (sku, balance, name) VALUES ($1, $2, $3);
        """, sku, item["balance"], name)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö
    if to_delete:
        await conn.execute("""
            DELETE FROM active_stoplist WHERE sku = ANY($1);
        """, to_delete)

    await conn.close()

    # üßæ –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n–ù–æ–≤—ã–µ –±–ª—é–¥–∞ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ üö´")
    for _, name in new_items:
        print(f"‚ñ´Ô∏è {name}")
    print("\n–£–∂–µ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ")
    for _, name in existing_items:
        print(f"‚ñ´Ô∏è {name}")
    print("\n#—Å—Ç–æ–ø–ª–∏—Å—Ç")

    print(f"\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(new_items)}, —É–¥–∞–ª–µ–Ω–æ: {len(to_delete)}")

def format_stoplist_message(added_items, removed_items, existing_items):
    message = "–ù–æ–≤—ã–µ –±–ª—é–¥–∞ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ üö´"
    if added_items:
        for item in added_items:
            message += f"\n‚ñ´Ô∏è {item['name']}"
    else:
        message += "\n‚ñ´Ô∏è ‚Äî"

    message += "\n\n–£–¥–∞–ª–µ–Ω—ã –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞ ‚úÖ"
    if removed_items:
        for item in removed_items:
            message += f"\n‚ñ´Ô∏è {item['name']}"
    else:
        message += "\n‚ñ´Ô∏è ‚Äî"

    message += "\n\n–û—Å—Ç–∞–ª–∏—Å—å –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ"
    if existing_items:
        for item in existing_items:
            message += f"\n‚ñ´Ô∏è {item['name']}"
    else:
        message += "\n‚ñ´Ô∏è ‚Äî"

    message += f"\n\n#—Å—Ç–æ–ø–ª–∏—Å—Ç\n\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(added_items)}, —É–¥–∞–ª–µ–Ω–æ: {len(removed_items)}"
    return message

async def send_telegram_message(text: str):
    chat_ids = await get_all_chat_ids()
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    for chat_id in chat_ids:
        payload = {
            "chat_id": chat_id,
            "text": text
        }
        try:
            response = httpx.post(url, json=payload)
            response.raise_for_status()
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ chat_id={chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram (chat_id={chat_id}): {e}")


async def main():
    token = await fetch_token()
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    print(f"‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
    terminal_group_ids = fetch_terminal_groups(token)
    stoplist_items = fetch_stop_list_raw(token, terminal_group_ids)

    # üßæ –°–æ–ø–æ—Å—Ç–∞–≤–∏–º —Å –ë–î –∏ –≤—ã–≤–µ–¥–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    mapped = await map_stoplist_with_db(DB_CONFIG, stoplist_items)
    print("\nüßæ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–æ–ø-–ø–æ–∑–∏—Ü–∏–∏:")
    for line in mapped:
        print("‚Ä¢", line)

    # üì• –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    conn = await asyncpg.connect(**DB_CONFIG)
    current_rows = await conn.fetch("SELECT sku, name FROM active_stoplist;")
    await conn.close()
    current_skus = {row["sku"]: row["name"] for row in current_rows}
    incoming_skus = {item["sku"]: item["name"] for item in stoplist_items}

    added_items = [{"sku": sku, "name": name} for sku, name in incoming_skus.items() if sku not in current_skus]
    removed_items = [{"sku": sku, "name": name} for sku, name in current_skus.items() if sku not in incoming_skus]
    existing_items = [{"sku": sku, "name": name} for sku, name in incoming_skus.items() if sku in current_skus]

    # üíæ –û–±–Ω–æ–≤–∏–º —Ç–∞–±–ª–∏—Ü—É
    await sync_stoplist_with_db(stoplist_items)

    # üì§ –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = format_stoplist_message(added_items, removed_items, existing_items)
    await send_telegram_message(msg)

if __name__ == "__main__":
    asyncio.run(main())

